<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="warn" monitorInterval="1800" schema="Log4J-V2.2.xsd">
  <Properties>
    <property name="log_pattern">
      %d{yyyy-MM-dd HH:mm:ss} [%t] [%c{1}.%M()] %-5level - %msg%xEx%n
    </property>
    <property name="log_path">
      logs
    </property>
    <property name="file_name">
      consult-service.log
    </property>
    <property name="rolling_file_name">
      logs\archive\consult-service-%d{yyyy-MM-dd}-%i.log.gz
    </property>
    <property name="error_file_name">
       consult-service-error.log
    </property>
    <property name="error_rolling_file_name">
      logs\archive\consult-service_error-%d{yyyy-MM-dd}-%i.log.gz
    </property>
    <property name="every_file_size">10MB</property><!-- 日志切割的最小单位 -->
    <property name="output_log_level">info</property><!-- 日志输出级别 -->
  </Properties>

  <Appenders>
    <!--这个输出控制台的配置-->
    <Console name="Console" target="SYSTEM_OUT">
      <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
<!--      <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>-->
      <PatternLayout pattern="${log_pattern}" />
    </Console>

    <!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
    <!-- 按月生成归档日志，可以使用 filePattern="logs/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz" -->
    <!-- 显示error级别之外的信息 -->
    <RollingFile name="RollingFile" fileName="${log_path}/${file_name}" filePattern="${rolling_file_name}" immediateFlush="false">
      <PatternLayout pattern="${log_pattern}" />
      <SizeBasedTriggeringPolicy size="${every_file_size}"/>
      <Filters>
        <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
        <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
      </Filters>
    </RollingFile>

    <!--如果需要配置多个Rollingfile地址，还需要在root下添加appender-ref ref="RollingFile1"/>
            只显示error级别的信息
     -->
    <RollingFile name="RollingErrorFile" fileName="${log_path}/${error_file_name}"
      filePattern="${error_rolling_file_name}">
      <PatternLayout pattern="${log_pattern}"/>
      <SizeBasedTriggeringPolicy size="${every_file_size}"/>
      <Filters>
        <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
      </Filters>
    </RollingFile>

  </Appenders>

  <Loggers>
    <!-- 3rdparty Loggers -->
    <!-- <logger name="org.springframework.core" level="info">
    </logger>
    <logger name="org.springframework.beans" level="info">
    </logger>
    -->
    <!-- 设置对打印sql语句的支持 -->
    <logger name="java.sql" level="debug" additivity="false">
      <appender-ref ref="Console"/>
    </logger>

    <!--建立一个默认的root的logger，需要在root的level中指定输出的级别，-->
    <root level="${output_log_level}">
      <appender-ref ref="RollingFile"/>
      <appender-ref ref="RollingErrorFile"/>
      <appender-ref ref="Console"/>
    </root>
    <!--AsyncLogger :异步日志,LOG4J有三种日志模式,全异步日志,混合模式,同步日志,性能从高到底,线程越多效率越高,也可以避免日志卡死线程情况发生-->
    <!--additivity="false" : additivity设置事件是否在root logger输出，为了避免重复输出，可以在Logger 标签下设置additivity为”false”-->
    <AsyncLogger name="AsyncLogger" level="${output_log_level}" includeLocation="true" additivity="false">
      <appender-ref ref="RollingErrorFile"/>
    </AsyncLogger>
  </Loggers>
</Configuration>